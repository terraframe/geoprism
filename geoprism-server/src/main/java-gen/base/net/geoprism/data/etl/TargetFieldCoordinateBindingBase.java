/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism(tm).
 *
 * Geoprism(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.data.etl;

@com.runwaysdk.business.ClassSignature(hash = -137164151)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TargetFieldCoordinateBinding.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TargetFieldCoordinateBindingBase extends net.geoprism.data.etl.TargetFieldBinding 
{
  public final static String CLASS = "net.geoprism.data.etl.TargetFieldCoordinateBinding";
  public static java.lang.String LATITUDEATTRIBUTE = "latitudeAttribute";
  public static java.lang.String LONGITUDEATTRIBUTE = "longitudeAttribute";
  private static final long serialVersionUID = -137164151;
  
  public TargetFieldCoordinateBindingBase()
  {
    super();
  }
  
  public com.runwaysdk.system.metadata.MdAttribute getLatitudeAttribute()
  {
    if (getValue(LATITUDEATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttribute.get(getValue(LATITUDEATTRIBUTE));
    }
  }
  
  public String getLatitudeAttributeId()
  {
    return getValue(LATITUDEATTRIBUTE);
  }
  
  public void validateLatitudeAttribute()
  {
    this.validateAttribute(LATITUDEATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLatitudeAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.TargetFieldCoordinateBinding.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LATITUDEATTRIBUTE);
  }
  
  public void setLatitudeAttribute(com.runwaysdk.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(LATITUDEATTRIBUTE, "");
    }
    else
    {
      setValue(LATITUDEATTRIBUTE, value.getOid());
    }
  }
  
  public com.runwaysdk.system.metadata.MdAttribute getLongitudeAttribute()
  {
    if (getValue(LONGITUDEATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttribute.get(getValue(LONGITUDEATTRIBUTE));
    }
  }
  
  public String getLongitudeAttributeId()
  {
    return getValue(LONGITUDEATTRIBUTE);
  }
  
  public void validateLongitudeAttribute()
  {
    this.validateAttribute(LONGITUDEATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLongitudeAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.TargetFieldCoordinateBinding.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LONGITUDEATTRIBUTE);
  }
  
  public void setLongitudeAttribute(com.runwaysdk.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(LONGITUDEATTRIBUTE, "");
    }
    else
    {
      setValue(LONGITUDEATTRIBUTE, value.getOid());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TargetFieldCoordinateBindingQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    TargetFieldCoordinateBindingQuery query = new TargetFieldCoordinateBindingQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static TargetFieldCoordinateBinding get(String oid)
  {
    return (TargetFieldCoordinateBinding) com.runwaysdk.business.Business.get(oid);
  }
  
  public static TargetFieldCoordinateBinding getByKey(String key)
  {
    return (TargetFieldCoordinateBinding) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static TargetFieldCoordinateBinding lock(java.lang.String oid)
  {
    TargetFieldCoordinateBinding _instance = TargetFieldCoordinateBinding.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static TargetFieldCoordinateBinding unlock(java.lang.String oid)
  {
    TargetFieldCoordinateBinding _instance = TargetFieldCoordinateBinding.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
