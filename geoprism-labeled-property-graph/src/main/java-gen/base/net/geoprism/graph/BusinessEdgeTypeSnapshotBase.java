package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = -1227413819)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to BusinessEdgeTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class BusinessEdgeTypeSnapshotBase extends net.geoprism.graph.RelationshipTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.BusinessEdgeTypeSnapshot";
  public final static java.lang.String CHILDTYPE = "childType";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String GRAPHMDEDGE = "graphMdEdge";
  public final static java.lang.String ISCHILDGEOOBJECT = "isChildGeoObject";
  public final static java.lang.String ISPARENTGEOOBJECT = "isParentGeoObject";
  public final static java.lang.String ORGCODE = "orgCode";
  public final static java.lang.String PARENTTYPE = "parentType";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -1227413819;
  
  public BusinessEdgeTypeSnapshotBase()
  {
    super();
    description = super.getStruct("description");
    displayLabel = super.getStruct("displayLabel");
  }
  
  public net.geoprism.graph.ObjectTypeSnapshot getChildType()
  {
    if (getValue(CHILDTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.graph.ObjectTypeSnapshot.get(getValue(CHILDTYPE));
    }
  }
  
  public String getChildTypeOid()
  {
    return getValue(CHILDTYPE);
  }
  
  public void validateChildType()
  {
    this.validateAttribute(CHILDTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getChildTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CHILDTYPE);
  }
  
  public void setChildType(net.geoprism.graph.ObjectTypeSnapshot value)
  {
    if(value == null)
    {
      setValue(CHILDTYPE, "");
    }
    else
    {
      setValue(CHILDTYPE, value.getOid());
    }
  }
  
  public void setChildTypeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(CHILDTYPE, "");
    }
    else
    {
      setValue(CHILDTYPE, oid);
    }
  }
  
  public String getCode()
  {
    return getValue(CODE);
  }
  
  public void validateCode()
  {
    this.validateAttribute(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    if(value == null)
    {
      setValue(CODE, "");
    }
    else
    {
      setValue(CODE, value);
    }
  }
  
  public net.geoprism.graph.BusinessEdgeTypeSnapshotDescription getDescription()
  {
    return (net.geoprism.graph.BusinessEdgeTypeSnapshotDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public net.geoprism.graph.BusinessEdgeTypeSnapshotDisplayLabel getDisplayLabel()
  {
    return (net.geoprism.graph.BusinessEdgeTypeSnapshotDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.MdEdge getGraphMdEdge()
  {
    if (getValue(GRAPHMDEDGE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdEdge.get(getValue(GRAPHMDEDGE));
    }
  }
  
  public String getGraphMdEdgeOid()
  {
    return getValue(GRAPHMDEDGE);
  }
  
  public void validateGraphMdEdge()
  {
    this.validateAttribute(GRAPHMDEDGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGraphMdEdgeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GRAPHMDEDGE);
  }
  
  public void setGraphMdEdge(com.runwaysdk.system.metadata.MdEdge value)
  {
    if(value == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, value.getOid());
    }
  }
  
  public void setGraphMdEdgeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, oid);
    }
  }
  
  public Boolean getIsChildGeoObject()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISCHILDGEOOBJECT));
  }
  
  public void validateIsChildGeoObject()
  {
    this.validateAttribute(ISCHILDGEOOBJECT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsChildGeoObjectMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISCHILDGEOOBJECT);
  }
  
  public void setIsChildGeoObject(Boolean value)
  {
    if(value == null)
    {
      setValue(ISCHILDGEOOBJECT, "");
    }
    else
    {
      setValue(ISCHILDGEOOBJECT, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsParentGeoObject()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISPARENTGEOOBJECT));
  }
  
  public void validateIsParentGeoObject()
  {
    this.validateAttribute(ISPARENTGEOOBJECT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsParentGeoObjectMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPARENTGEOOBJECT);
  }
  
  public void setIsParentGeoObject(Boolean value)
  {
    if(value == null)
    {
      setValue(ISPARENTGEOOBJECT, "");
    }
    else
    {
      setValue(ISPARENTGEOOBJECT, java.lang.Boolean.toString(value));
    }
  }
  
  public String getOrgCode()
  {
    return getValue(ORGCODE);
  }
  
  public void validateOrgCode()
  {
    this.validateAttribute(ORGCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOrgCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ORGCODE);
  }
  
  public void setOrgCode(String value)
  {
    if(value == null)
    {
      setValue(ORGCODE, "");
    }
    else
    {
      setValue(ORGCODE, value);
    }
  }
  
  public net.geoprism.graph.ObjectTypeSnapshot getParentType()
  {
    if (getValue(PARENTTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.graph.ObjectTypeSnapshot.get(getValue(PARENTTYPE));
    }
  }
  
  public String getParentTypeOid()
  {
    return getValue(PARENTTYPE);
  }
  
  public void validateParentType()
  {
    this.validateAttribute(PARENTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getParentTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessEdgeTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PARENTTYPE);
  }
  
  public void setParentType(net.geoprism.graph.ObjectTypeSnapshot value)
  {
    if(value == null)
    {
      setValue(PARENTTYPE, "");
    }
    else
    {
      setValue(PARENTTYPE, value.getOid());
    }
  }
  
  public void setParentTypeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(PARENTTYPE, "");
    }
    else
    {
      setValue(PARENTTYPE, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static BusinessEdgeTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    BusinessEdgeTypeSnapshotQuery query = new BusinessEdgeTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static BusinessEdgeTypeSnapshot get(String oid)
  {
    return (BusinessEdgeTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static BusinessEdgeTypeSnapshot getByKey(String key)
  {
    return (BusinessEdgeTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static BusinessEdgeTypeSnapshot lock(java.lang.String oid)
  {
    BusinessEdgeTypeSnapshot _instance = BusinessEdgeTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static BusinessEdgeTypeSnapshot unlock(java.lang.String oid)
  {
    BusinessEdgeTypeSnapshot _instance = BusinessEdgeTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
