package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 854524012)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IncrementalLabeledPropertyGraphType.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IncrementalLabeledPropertyGraphTypeBase extends net.geoprism.graph.LabeledPropertyGraphType
{
  public final static String CLASS = "net.geoprism.graph.IncrementalLabeledPropertyGraphType";
  public final static java.lang.String FREQUENCY = "frequency";
  public final static java.lang.String PUBLISHINGSTARTDATE = "publishingStartDate";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 854524012;
  
  public IncrementalLabeledPropertyGraphTypeBase()
  {
    super();
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<net.geoprism.graph.ChangeFrequency> getFrequency()
  {
    return (java.util.List<net.geoprism.graph.ChangeFrequency>) getEnumValues(FREQUENCY);
  }
  
  public void addFrequency(net.geoprism.graph.ChangeFrequency value)
  {
    if(value != null)
    {
      addEnumItem(FREQUENCY, value.getOid());
    }
  }
  
  public void removeFrequency(net.geoprism.graph.ChangeFrequency value)
  {
    if(value != null)
    {
      removeEnumItem(FREQUENCY, value.getOid());
    }
  }
  
  public void clearFrequency()
  {
    clearEnum(FREQUENCY);
  }
  
  public void validateFrequency()
  {
    this.validateAttribute(FREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.IncrementalLabeledPropertyGraphType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(FREQUENCY);
  }
  
  public java.util.Date getPublishingStartDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(PUBLISHINGSTARTDATE));
  }
  
  public void validatePublishingStartDate()
  {
    this.validateAttribute(PUBLISHINGSTARTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getPublishingStartDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.IncrementalLabeledPropertyGraphType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(PUBLISHINGSTARTDATE);
  }
  
  public void setPublishingStartDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(PUBLISHINGSTARTDATE, "");
    }
    else
    {
      setValue(PUBLISHINGSTARTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IncrementalLabeledPropertyGraphType get(String oid)
  {
    return (IncrementalLabeledPropertyGraphType) com.runwaysdk.business.Business.get(oid);
  }
  
  public static IncrementalLabeledPropertyGraphType getByKey(String key)
  {
    return (IncrementalLabeledPropertyGraphType) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static IncrementalLabeledPropertyGraphType lock(java.lang.String oid)
  {
    IncrementalLabeledPropertyGraphType _instance = IncrementalLabeledPropertyGraphType.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static IncrementalLabeledPropertyGraphType unlock(java.lang.String oid)
  {
    IncrementalLabeledPropertyGraphType _instance = IncrementalLabeledPropertyGraphType.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
