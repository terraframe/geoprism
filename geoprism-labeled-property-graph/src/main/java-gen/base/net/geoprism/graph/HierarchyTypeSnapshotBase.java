package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 172951766)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to HierarchyTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class HierarchyTypeSnapshotBase extends net.geoprism.graph.RelationshipTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.HierarchyTypeSnapshot";
  public final static java.lang.String ACCESSCONSTRAINTS = "accessConstraints";
  public final static java.lang.String ACKNOWLEDGEMENT = "acknowledgement";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public final static java.lang.String DISCLAIMER = "disclaimer";
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String GRAPHMDEDGE = "graphMdEdge";
  public final static java.lang.String ORGCODE = "orgCode";
  public final static java.lang.String PROGRESS = "progress";
  public final static java.lang.String SUPERHIERARCHY = "superHierarchy";
  public final static java.lang.String USECONSTRAINTS = "useConstraints";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 172951766;
  
  public HierarchyTypeSnapshotBase()
  {
    super();
    description = super.getStruct("description");
    displayLabel = super.getStruct("displayLabel");
  }
  
  public String getAccessConstraints()
  {
    return getValue(ACCESSCONSTRAINTS);
  }
  
  public void validateAccessConstraints()
  {
    this.validateAttribute(ACCESSCONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAccessConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ACCESSCONSTRAINTS);
  }
  
  public void setAccessConstraints(String value)
  {
    if(value == null)
    {
      setValue(ACCESSCONSTRAINTS, "");
    }
    else
    {
      setValue(ACCESSCONSTRAINTS, value);
    }
  }
  
  public String getAcknowledgement()
  {
    return getValue(ACKNOWLEDGEMENT);
  }
  
  public void validateAcknowledgement()
  {
    this.validateAttribute(ACKNOWLEDGEMENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAcknowledgementMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ACKNOWLEDGEMENT);
  }
  
  public void setAcknowledgement(String value)
  {
    if(value == null)
    {
      setValue(ACKNOWLEDGEMENT, "");
    }
    else
    {
      setValue(ACKNOWLEDGEMENT, value);
    }
  }
  
  public String getCode()
  {
    return getValue(CODE);
  }
  
  public void validateCode()
  {
    this.validateAttribute(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    if(value == null)
    {
      setValue(CODE, "");
    }
    else
    {
      setValue(CODE, value);
    }
  }
  
  public net.geoprism.graph.HierarchyTypeSnapshotDescription getDescription()
  {
    return (net.geoprism.graph.HierarchyTypeSnapshotDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public String getDisclaimer()
  {
    return getValue(DISCLAIMER);
  }
  
  public void validateDisclaimer()
  {
    this.validateAttribute(DISCLAIMER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getDisclaimerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(DISCLAIMER);
  }
  
  public void setDisclaimer(String value)
  {
    if(value == null)
    {
      setValue(DISCLAIMER, "");
    }
    else
    {
      setValue(DISCLAIMER, value);
    }
  }
  
  public net.geoprism.graph.HierarchyTypeSnapshotDisplayLabel getDisplayLabel()
  {
    return (net.geoprism.graph.HierarchyTypeSnapshotDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.MdEdge getGraphMdEdge()
  {
    if (getValue(GRAPHMDEDGE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdEdge.get(getValue(GRAPHMDEDGE));
    }
  }
  
  public String getGraphMdEdgeOid()
  {
    return getValue(GRAPHMDEDGE);
  }
  
  public void validateGraphMdEdge()
  {
    this.validateAttribute(GRAPHMDEDGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGraphMdEdgeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GRAPHMDEDGE);
  }
  
  public void setGraphMdEdge(com.runwaysdk.system.metadata.MdEdge value)
  {
    if(value == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, value.getOid());
    }
  }
  
  public void setGraphMdEdgeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, oid);
    }
  }
  
  public String getOrgCode()
  {
    return getValue(ORGCODE);
  }
  
  public void validateOrgCode()
  {
    this.validateAttribute(ORGCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOrgCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ORGCODE);
  }
  
  public void setOrgCode(String value)
  {
    if(value == null)
    {
      setValue(ORGCODE, "");
    }
    else
    {
      setValue(ORGCODE, value);
    }
  }
  
  public String getProgress()
  {
    return getValue(PROGRESS);
  }
  
  public void validateProgress()
  {
    this.validateAttribute(PROGRESS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getProgressMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PROGRESS);
  }
  
  public void setProgress(String value)
  {
    if(value == null)
    {
      setValue(PROGRESS, "");
    }
    else
    {
      setValue(PROGRESS, value);
    }
  }
  
  public String getSuperHierarchy()
  {
    return getValue(SUPERHIERARCHY);
  }
  
  public void validateSuperHierarchy()
  {
    this.validateAttribute(SUPERHIERARCHY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getSuperHierarchyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(SUPERHIERARCHY);
  }
  
  public void setSuperHierarchy(String value)
  {
    if(value == null)
    {
      setValue(SUPERHIERARCHY, "");
    }
    else
    {
      setValue(SUPERHIERARCHY, value);
    }
  }
  
  public String getUseConstraints()
  {
    return getValue(USECONSTRAINTS);
  }
  
  public void validateUseConstraints()
  {
    this.validateAttribute(USECONSTRAINTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getUseConstraintsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.HierarchyTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(USECONSTRAINTS);
  }
  
  public void setUseConstraints(String value)
  {
    if(value == null)
    {
      setValue(USECONSTRAINTS, "");
    }
    else
    {
      setValue(USECONSTRAINTS, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static HierarchyTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    HierarchyTypeSnapshotQuery query = new HierarchyTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static HierarchyTypeSnapshot get(String oid)
  {
    return (HierarchyTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static HierarchyTypeSnapshot getByKey(String key)
  {
    return (HierarchyTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static HierarchyTypeSnapshot lock(java.lang.String oid)
  {
    HierarchyTypeSnapshot _instance = HierarchyTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static HierarchyTypeSnapshot unlock(java.lang.String oid)
  {
    HierarchyTypeSnapshot _instance = HierarchyTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
