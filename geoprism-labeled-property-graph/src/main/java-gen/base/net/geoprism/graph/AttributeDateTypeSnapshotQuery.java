package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 1035587500)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AttributeDateTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class AttributeDateTypeSnapshotQuery extends net.geoprism.graph.AttributeTypeSnapshotQuery

{

  public AttributeDateTypeSnapshotQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public AttributeDateTypeSnapshotQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return net.geoprism.graph.AttributeDateTypeSnapshot.CLASS;
  }
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends AttributeDateTypeSnapshot> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<AttributeDateTypeSnapshot>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface AttributeDateTypeSnapshotQueryReferenceIF extends net.geoprism.graph.AttributeTypeSnapshotQuery.AttributeTypeSnapshotQueryReferenceIF
  {


    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.graph.AttributeDateTypeSnapshot attributeDateTypeSnapshot);

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.graph.AttributeDateTypeSnapshot attributeDateTypeSnapshot);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class AttributeDateTypeSnapshotQueryReference extends net.geoprism.graph.AttributeTypeSnapshotQuery.AttributeTypeSnapshotQueryReference
 implements AttributeDateTypeSnapshotQueryReferenceIF

  {

  public AttributeDateTypeSnapshotQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.graph.AttributeDateTypeSnapshot attributeDateTypeSnapshot)
    {
      if(attributeDateTypeSnapshot == null) return this.EQ((java.lang.String)null);
      return this.EQ(attributeDateTypeSnapshot.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.graph.AttributeDateTypeSnapshot attributeDateTypeSnapshot)
    {
      if(attributeDateTypeSnapshot == null) return this.NE((java.lang.String)null);
      return this.NE(attributeDateTypeSnapshot.getOid());
    }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface AttributeDateTypeSnapshotQueryMultiReferenceIF extends net.geoprism.graph.AttributeTypeSnapshotQuery.AttributeTypeSnapshotQueryMultiReferenceIF
  {


    public com.runwaysdk.query.Condition containsAny(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot);
    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot);
    public com.runwaysdk.query.Condition containsAll(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot);
    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot);
    public com.runwaysdk.query.Condition containsExactly(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class AttributeDateTypeSnapshotQueryMultiReference extends net.geoprism.graph.AttributeTypeSnapshotQuery.AttributeTypeSnapshotQueryMultiReference
 implements AttributeDateTypeSnapshotQueryMultiReferenceIF

  {

  public AttributeDateTypeSnapshotQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot)  {

      String[] itemIdArray = new String[attributeDateTypeSnapshot.length]; 

      for (int i=0; i<attributeDateTypeSnapshot.length; i++)
      {
        itemIdArray[i] = attributeDateTypeSnapshot[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot)  {

      String[] itemIdArray = new String[attributeDateTypeSnapshot.length]; 

      for (int i=0; i<attributeDateTypeSnapshot.length; i++)
      {
        itemIdArray[i] = attributeDateTypeSnapshot[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot)  {

      String[] itemIdArray = new String[attributeDateTypeSnapshot.length]; 

      for (int i=0; i<attributeDateTypeSnapshot.length; i++)
      {
        itemIdArray[i] = attributeDateTypeSnapshot[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot)  {

      String[] itemIdArray = new String[attributeDateTypeSnapshot.length]; 

      for (int i=0; i<attributeDateTypeSnapshot.length; i++)
      {
        itemIdArray[i] = attributeDateTypeSnapshot[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(net.geoprism.graph.AttributeDateTypeSnapshot ... attributeDateTypeSnapshot)  {

      String[] itemIdArray = new String[attributeDateTypeSnapshot.length]; 

      for (int i=0; i<attributeDateTypeSnapshot.length; i++)
      {
        itemIdArray[i] = attributeDateTypeSnapshot[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  }
}
