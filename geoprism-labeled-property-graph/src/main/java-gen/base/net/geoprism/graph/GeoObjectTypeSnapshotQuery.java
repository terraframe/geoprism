package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 342361321)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoObjectTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class GeoObjectTypeSnapshotQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public GeoObjectTypeSnapshotQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public GeoObjectTypeSnapshotQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return net.geoprism.graph.GeoObjectTypeSnapshot.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getCode()
  {
    return getCode(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION);

    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION);

    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, mdAttributeIF, this, alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL);

    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL);

    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeometryType()
  {
    return getGeometryType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex()
  {
    return getGraphMdVertex(null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX);

    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX);

    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsAbstract()
  {
    return getIsAbstract(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable()
  {
    return getIsGeometryEditable(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsPrivate()
  {
    return getIsPrivate(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsRoot()
  {
    return getIsRoot(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent()
  {
    return getParent(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT);

    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT);

    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, displayLabel);

  }
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion()
  {
    return getVersion(null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION);

    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION);

    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION, mdAttributeIF, this, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX)) 
    {
       return new com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION)) 
    {
       return new net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends GeoObjectTypeSnapshot> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<GeoObjectTypeSnapshot>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isNotChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isNotChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isNotParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isNotParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(snapshotHierarchyQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoObjectTypeSnapshotQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableChar getCode();
    public com.runwaysdk.query.SelectableChar getCode(String alias);
    public com.runwaysdk.query.SelectableChar getCode(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription();
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel();
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getGeometryType();
    public com.runwaysdk.query.SelectableChar getGeometryType(String alias);
    public com.runwaysdk.query.SelectableChar getGeometryType(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex();
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias);
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsAbstract();
    public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable();
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsPrivate();
    public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsRoot();
    public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent();
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion();
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias);
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.graph.GeoObjectTypeSnapshot geoObjectTypeSnapshot);

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.graph.GeoObjectTypeSnapshot geoObjectTypeSnapshot);


  public com.runwaysdk.query.Condition childSnapshot();

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot();

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition NOT_IN_childSnapshot();

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition parentSnapshot();
  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot();
  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot();
  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoObjectTypeSnapshotQueryReference extends com.runwaysdk.query.AttributeReference
 implements GeoObjectTypeSnapshotQueryReferenceIF

  {

  public GeoObjectTypeSnapshotQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.graph.GeoObjectTypeSnapshot geoObjectTypeSnapshot)
    {
      if(geoObjectTypeSnapshot == null) return this.EQ((java.lang.String)null);
      return this.EQ(geoObjectTypeSnapshot.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.graph.GeoObjectTypeSnapshot geoObjectTypeSnapshot)
    {
      if(geoObjectTypeSnapshot == null) return this.NE((java.lang.String)null);
      return this.NE(geoObjectTypeSnapshot.getOid());
    }

  public com.runwaysdk.query.SelectableChar getCode()
  {
    return getCode(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY,  alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalText.CLASS, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalText.CLASS, alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeometryType()
  {
    return getGeometryType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex()
  {
    return getGraphMdVertex(null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias)
  {
    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsAbstract()
  {
    return getIsAbstract(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable()
  {
    return getIsGeometryEditable(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsPrivate()
  {
    return getIsPrivate(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsRoot()
  {
    return getIsRoot(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER,  alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent()
  {
    return getParent(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, displayLabel);

  }
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion()
  {
    return getVersion(null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias)
  {
    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION, alias, null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias, String displayLabel)
  {
    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION,  alias, displayLabel);

  }

  public com.runwaysdk.query.Condition childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isParentIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.isParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.isParentIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isNotParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isNotParentIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoObjectTypeSnapshotQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.isNotParentIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasChild(geoObjectTypeSnapshotQuery));
    return this.isNotParentIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isChildIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.isChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.isChildIn_SUBSELECT(snapshotHierarchyQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isNotChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    return this.isNotChildIn_SUBSELECT(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.graph.SnapshotHierarchy.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoObjectTypeSnapshotQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.isNotChildIn(snapshotHierarchyQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentSnapshot(net.geoprism.graph.GeoObjectTypeSnapshotQuery geoObjectTypeSnapshotQuery, net.geoprism.graph.SnapshotHierarchyQuery snapshotHierarchyQuery)
  {
    snapshotHierarchyQuery.AND(snapshotHierarchyQuery.hasParent(geoObjectTypeSnapshotQuery));
    return this.isNotChildIn_SUBSELECT(snapshotHierarchyQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX)) 
    {
       return new com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION)) 
    {
       return new net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoObjectTypeSnapshotQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableChar getCode();
    public com.runwaysdk.query.SelectableChar getCode(String alias);
    public com.runwaysdk.query.SelectableChar getCode(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription();
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel();
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getGeometryType();
    public com.runwaysdk.query.SelectableChar getGeometryType(String alias);
    public com.runwaysdk.query.SelectableChar getGeometryType(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex();
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias);
    public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsAbstract();
    public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable();
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsPrivate();
    public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsRoot();
    public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent();
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias);
    public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion();
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias);
    public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot);
    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot);
    public com.runwaysdk.query.Condition containsAll(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot);
    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot);
    public com.runwaysdk.query.Condition containsExactly(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoObjectTypeSnapshotQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements GeoObjectTypeSnapshotQueryMultiReferenceIF

  {

  public GeoObjectTypeSnapshotQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot)  {

      String[] itemIdArray = new String[geoObjectTypeSnapshot.length]; 

      for (int i=0; i<geoObjectTypeSnapshot.length; i++)
      {
        itemIdArray[i] = geoObjectTypeSnapshot[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot)  {

      String[] itemIdArray = new String[geoObjectTypeSnapshot.length]; 

      for (int i=0; i<geoObjectTypeSnapshot.length; i++)
      {
        itemIdArray[i] = geoObjectTypeSnapshot[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot)  {

      String[] itemIdArray = new String[geoObjectTypeSnapshot.length]; 

      for (int i=0; i<geoObjectTypeSnapshot.length; i++)
      {
        itemIdArray[i] = geoObjectTypeSnapshot[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot)  {

      String[] itemIdArray = new String[geoObjectTypeSnapshot.length]; 

      for (int i=0; i<geoObjectTypeSnapshot.length; i++)
      {
        itemIdArray[i] = geoObjectTypeSnapshot[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(net.geoprism.graph.GeoObjectTypeSnapshot ... geoObjectTypeSnapshot)  {

      String[] itemIdArray = new String[geoObjectTypeSnapshot.length]; 

      for (int i=0; i<geoObjectTypeSnapshot.length; i++)
      {
        itemIdArray[i] = geoObjectTypeSnapshot[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableChar getCode()
  {
    return getCode(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCode(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CODE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY,  alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalText.CLASS, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalText.CLASS, alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getGeometryType()
  {
    return getGeometryType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeometryType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GEOMETRYTYPE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex()
  {
    return getGraphMdVertex(null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias)
  {
    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF getGraphMdVertex(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsAbstract()
  {
    return getIsAbstract(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAbstract(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISABSTRACT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable()
  {
    return getIsGeometryEditable(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsGeometryEditable(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISGEOMETRYEDITABLE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsPrivate()
  {
    return getIsPrivate(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsPrivate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISPRIVATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsRoot()
  {
    return getIsRoot(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsRoot(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.ISROOT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OID, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER,  alias, displayLabel);

  }
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent()
  {
    return getParent(null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT, alias, null);

  }
 
  public net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF getParent(String alias, String displayLabel)
  {
    return (net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.TYPE, alias, displayLabel);

  }
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion()
  {
    return getVersion(null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias)
  {
    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION, alias, null);

  }
 
  public net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF getVersion(String alias, String displayLabel)
  {
    return (net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReferenceIF)this.get(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION,  alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.GRAPHMDVERTEX)) 
    {
       return new com.runwaysdk.system.metadata.MdVertexQuery.MdVertexQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.PARENT)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotQuery.GeoObjectTypeSnapshotQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.VERSION)) 
    {
       return new net.geoprism.graph.LabeledPropertyGraphTypeVersionQuery.LabeledPropertyGraphTypeVersionQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DESCRIPTION)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDescriptionQuery.GeoObjectTypeSnapshotDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.graph.GeoObjectTypeSnapshot.DISPLAYLABEL)) 
    {
       return new net.geoprism.graph.GeoObjectTypeSnapshotDisplayLabelQuery.GeoObjectTypeSnapshotDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
