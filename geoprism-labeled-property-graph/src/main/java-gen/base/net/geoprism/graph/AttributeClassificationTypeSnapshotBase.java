package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = -316625135)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AttributeClassificationTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class AttributeClassificationTypeSnapshotBase extends net.geoprism.graph.AttributeTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.AttributeClassificationTypeSnapshot";
  public final static java.lang.String CLASSIFICATIONTYPE = "classificationType";
  public final static java.lang.String ROOTTERM = "rootTerm";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -316625135;
  
  public AttributeClassificationTypeSnapshotBase()
  {
    super();
  }
  
  public String getClassificationType()
  {
    return getValue(CLASSIFICATIONTYPE);
  }
  
  public void validateClassificationType()
  {
    this.validateAttribute(CLASSIFICATIONTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getClassificationTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.AttributeClassificationTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(CLASSIFICATIONTYPE);
  }
  
  public void setClassificationType(String value)
  {
    if(value == null)
    {
      setValue(CLASSIFICATIONTYPE, "");
    }
    else
    {
      setValue(CLASSIFICATIONTYPE, value);
    }
  }
  
  public String getRootTerm()
  {
    return getValue(ROOTTERM);
  }
  
  public void validateRootTerm()
  {
    this.validateAttribute(ROOTTERM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getRootTermMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.AttributeClassificationTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ROOTTERM);
  }
  
  public void setRootTerm(String value)
  {
    if(value == null)
    {
      setValue(ROOTTERM, "");
    }
    else
    {
      setValue(ROOTTERM, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AttributeClassificationTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    AttributeClassificationTypeSnapshotQuery query = new AttributeClassificationTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static AttributeClassificationTypeSnapshot get(String oid)
  {
    return (AttributeClassificationTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static AttributeClassificationTypeSnapshot getByKey(String key)
  {
    return (AttributeClassificationTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static AttributeClassificationTypeSnapshot lock(java.lang.String oid)
  {
    AttributeClassificationTypeSnapshot _instance = AttributeClassificationTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static AttributeClassificationTypeSnapshot unlock(java.lang.String oid)
  {
    AttributeClassificationTypeSnapshot _instance = AttributeClassificationTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
