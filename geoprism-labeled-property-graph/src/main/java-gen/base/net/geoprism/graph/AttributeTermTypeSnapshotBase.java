package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 1567874668)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AttributeTermTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class AttributeTermTypeSnapshotBase extends net.geoprism.graph.AttributeTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.AttributeTermTypeSnapshot";
  public final static java.lang.String ROOTTERM = "rootTerm";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1567874668;
  
  public AttributeTermTypeSnapshotBase()
  {
    super();
  }
  
  public net.geoprism.ontology.Classifier getRootTerm()
  {
    if (getValue(ROOTTERM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return net.geoprism.ontology.Classifier.get(getValue(ROOTTERM));
    }
  }
  
  public String getRootTermOid()
  {
    return getValue(ROOTTERM);
  }
  
  public void validateRootTerm()
  {
    this.validateAttribute(ROOTTERM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getRootTermMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.AttributeTermTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ROOTTERM);
  }
  
  public void setRootTerm(net.geoprism.ontology.Classifier value)
  {
    if(value == null)
    {
      setValue(ROOTTERM, "");
    }
    else
    {
      setValue(ROOTTERM, value.getOid());
    }
  }
  
  public void setRootTermId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(ROOTTERM, "");
    }
    else
    {
      setValue(ROOTTERM, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AttributeTermTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    AttributeTermTypeSnapshotQuery query = new AttributeTermTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static AttributeTermTypeSnapshot get(String oid)
  {
    return (AttributeTermTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static AttributeTermTypeSnapshot getByKey(String key)
  {
    return (AttributeTermTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static AttributeTermTypeSnapshot lock(java.lang.String oid)
  {
    AttributeTermTypeSnapshot _instance = AttributeTermTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static AttributeTermTypeSnapshot unlock(java.lang.String oid)
  {
    AttributeTermTypeSnapshot _instance = AttributeTermTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
