package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = -836756129)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to BusinessTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class BusinessTypeSnapshotBase extends net.geoprism.graph.ObjectTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.BusinessTypeSnapshot";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String GRAPHMDVERTEX = "graphMdVertex";
  public final static java.lang.String LABELATTRIBUTE = "labelAttribute";
  public final static java.lang.String ORGCODE = "orgCode";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -836756129;
  
  public BusinessTypeSnapshotBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public String getCode()
  {
    return getValue(CODE);
  }
  
  public void validateCode()
  {
    this.validateAttribute(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    if(value == null)
    {
      setValue(CODE, "");
    }
    else
    {
      setValue(CODE, value);
    }
  }
  
  public net.geoprism.graph.BusinessTypeSnapshotDisplayLabel getDisplayLabel()
  {
    return (net.geoprism.graph.BusinessTypeSnapshotDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.MdVertex getGraphMdVertex()
  {
    if (getValue(GRAPHMDVERTEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdVertex.get(getValue(GRAPHMDVERTEX));
    }
  }
  
  public String getGraphMdVertexOid()
  {
    return getValue(GRAPHMDVERTEX);
  }
  
  public void validateGraphMdVertex()
  {
    this.validateAttribute(GRAPHMDVERTEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGraphMdVertexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GRAPHMDVERTEX);
  }
  
  public void setGraphMdVertex(com.runwaysdk.system.metadata.MdVertex value)
  {
    if(value == null)
    {
      setValue(GRAPHMDVERTEX, "");
    }
    else
    {
      setValue(GRAPHMDVERTEX, value.getOid());
    }
  }
  
  public void setGraphMdVertexId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(GRAPHMDVERTEX, "");
    }
    else
    {
      setValue(GRAPHMDVERTEX, oid);
    }
  }
  
  public String getLabelAttribute()
  {
    return getValue(LABELATTRIBUTE);
  }
  
  public void validateLabelAttribute()
  {
    this.validateAttribute(LABELATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLabelAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LABELATTRIBUTE);
  }
  
  public void setLabelAttribute(String value)
  {
    if(value == null)
    {
      setValue(LABELATTRIBUTE, "");
    }
    else
    {
      setValue(LABELATTRIBUTE, value);
    }
  }
  
  public String getOrgCode()
  {
    return getValue(ORGCODE);
  }
  
  public void validateOrgCode()
  {
    this.validateAttribute(ORGCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getOrgCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.BusinessTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ORGCODE);
  }
  
  public void setOrgCode(String value)
  {
    if(value == null)
    {
      setValue(ORGCODE, "");
    }
    else
    {
      setValue(ORGCODE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static BusinessTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    BusinessTypeSnapshotQuery query = new BusinessTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static BusinessTypeSnapshot get(String oid)
  {
    return (BusinessTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static BusinessTypeSnapshot getByKey(String key)
  {
    return (BusinessTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static BusinessTypeSnapshot lock(java.lang.String oid)
  {
    BusinessTypeSnapshot _instance = BusinessTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static BusinessTypeSnapshot unlock(java.lang.String oid)
  {
    BusinessTypeSnapshot _instance = BusinessTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
