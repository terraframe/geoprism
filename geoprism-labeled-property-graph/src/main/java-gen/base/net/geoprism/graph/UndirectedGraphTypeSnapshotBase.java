package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 1832472114)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UndirectedGraphTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UndirectedGraphTypeSnapshotBase extends net.geoprism.graph.RelationshipTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.UndirectedGraphTypeSnapshot";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public final static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public final static java.lang.String GRAPHMDEDGE = "graphMdEdge";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 1832472114;
  
  public UndirectedGraphTypeSnapshotBase()
  {
    super();
    description = super.getStruct("description");
    displayLabel = super.getStruct("displayLabel");
  }
  
  public String getCode()
  {
    return getValue(CODE);
  }
  
  public void validateCode()
  {
    this.validateAttribute(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.UndirectedGraphTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    if(value == null)
    {
      setValue(CODE, "");
    }
    else
    {
      setValue(CODE, value);
    }
  }
  
  public net.geoprism.graph.UndirectedGraphTypeSnapshotDescription getDescription()
  {
    return (net.geoprism.graph.UndirectedGraphTypeSnapshotDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.UndirectedGraphTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalTextDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public net.geoprism.graph.UndirectedGraphTypeSnapshotDisplayLabel getDisplayLabel()
  {
    return (net.geoprism.graph.UndirectedGraphTypeSnapshotDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.UndirectedGraphTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public com.runwaysdk.system.metadata.MdEdge getGraphMdEdge()
  {
    if (getValue(GRAPHMDEDGE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdEdge.get(getValue(GRAPHMDEDGE));
    }
  }
  
  public String getGraphMdEdgeOid()
  {
    return getValue(GRAPHMDEDGE);
  }
  
  public void validateGraphMdEdge()
  {
    this.validateAttribute(GRAPHMDEDGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGraphMdEdgeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.UndirectedGraphTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GRAPHMDEDGE);
  }
  
  public void setGraphMdEdge(com.runwaysdk.system.metadata.MdEdge value)
  {
    if(value == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, value.getOid());
    }
  }
  
  public void setGraphMdEdgeId(java.lang.String oid)
  {
    if(oid == null)
    {
      setValue(GRAPHMDEDGE, "");
    }
    else
    {
      setValue(GRAPHMDEDGE, oid);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static UndirectedGraphTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    UndirectedGraphTypeSnapshotQuery query = new UndirectedGraphTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static UndirectedGraphTypeSnapshot get(String oid)
  {
    return (UndirectedGraphTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static UndirectedGraphTypeSnapshot getByKey(String key)
  {
    return (UndirectedGraphTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static UndirectedGraphTypeSnapshot lock(java.lang.String oid)
  {
    UndirectedGraphTypeSnapshot _instance = UndirectedGraphTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static UndirectedGraphTypeSnapshot unlock(java.lang.String oid)
  {
    UndirectedGraphTypeSnapshot _instance = UndirectedGraphTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
