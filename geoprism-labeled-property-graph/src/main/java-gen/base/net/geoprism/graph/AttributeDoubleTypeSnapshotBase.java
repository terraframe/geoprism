package net.geoprism.graph;

@com.runwaysdk.business.ClassSignature(hash = 632629870)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AttributeDoubleTypeSnapshot.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class AttributeDoubleTypeSnapshotBase extends net.geoprism.graph.AttributeTypeSnapshot
{
  public final static String CLASS = "net.geoprism.graph.AttributeDoubleTypeSnapshot";
  public final static java.lang.String PRECISION = "precision";
  public final static java.lang.String SCALE = "scale";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = 632629870;
  
  public AttributeDoubleTypeSnapshotBase()
  {
    super();
  }
  
  public Integer getPrecision()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(PRECISION));
  }
  
  public void validatePrecision()
  {
    this.validateAttribute(PRECISION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPrecisionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.AttributeDoubleTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(PRECISION);
  }
  
  public void setPrecision(Integer value)
  {
    if(value == null)
    {
      setValue(PRECISION, "");
    }
    else
    {
      setValue(PRECISION, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getScale()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SCALE));
  }
  
  public void validateScale()
  {
    this.validateAttribute(SCALE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getScaleMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.graph.AttributeDoubleTypeSnapshot.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(SCALE);
  }
  
  public void setScale(Integer value)
  {
    if(value == null)
    {
      setValue(SCALE, "");
    }
    else
    {
      setValue(SCALE, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AttributeDoubleTypeSnapshotQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    AttributeDoubleTypeSnapshotQuery query = new AttributeDoubleTypeSnapshotQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static AttributeDoubleTypeSnapshot get(String oid)
  {
    return (AttributeDoubleTypeSnapshot) com.runwaysdk.business.Business.get(oid);
  }
  
  public static AttributeDoubleTypeSnapshot getByKey(String key)
  {
    return (AttributeDoubleTypeSnapshot) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static AttributeDoubleTypeSnapshot lock(java.lang.String oid)
  {
    AttributeDoubleTypeSnapshot _instance = AttributeDoubleTypeSnapshot.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static AttributeDoubleTypeSnapshot unlock(java.lang.String oid)
  {
    AttributeDoubleTypeSnapshot _instance = AttributeDoubleTypeSnapshot.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
