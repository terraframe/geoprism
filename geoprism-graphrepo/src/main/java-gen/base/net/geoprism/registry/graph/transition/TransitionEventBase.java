/**
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism Registry(tm).
 *
 * Geoprism Registry(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism Registry(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism Registry(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.registry.graph.transition;

@com.runwaysdk.business.ClassSignature(hash = -435815979)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TransitionEvent.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TransitionEventBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "net.geoprism.registry.graph.transition.TransitionEvent";
  public static final java.lang.String AFTERTYPECODE = "afterTypeCode";
  public static final java.lang.String AFTERTYPEORGCODE = "afterTypeOrgCode";
  public static final java.lang.String BEFORETYPECODE = "beforeTypeCode";
  public static final java.lang.String BEFORETYPEORGCODE = "beforeTypeOrgCode";
  public static final java.lang.String DESCRIPTION = "description";
  public static final java.lang.String EVENTDATE = "eventDate";
  public static final java.lang.String EVENTID = "eventId";
  public static final java.lang.String OID = "oid";
  public static final java.lang.String SEQ = "seq";
  private static final long serialVersionUID = -435815979;
  
  public TransitionEventBase()
  {
    super();
  }
  
  public String getAfterTypeCode()
  {
    return (String) this.getObjectValue(AFTERTYPECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAfterTypeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(AFTERTYPECODE);
  }
  
  public void setAfterTypeCode(String value)
  {
    this.setValue(AFTERTYPECODE, value);
  }
  
  public String getAfterTypeOrgCode()
  {
    return (String) this.getObjectValue(AFTERTYPEORGCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getAfterTypeOrgCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(AFTERTYPEORGCODE);
  }
  
  public void setAfterTypeOrgCode(String value)
  {
    this.setValue(AFTERTYPEORGCODE, value);
  }
  
  public String getBeforeTypeCode()
  {
    return (String) this.getObjectValue(BEFORETYPECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getBeforeTypeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(BEFORETYPECODE);
  }
  
  public void setBeforeTypeCode(String value)
  {
    this.setValue(BEFORETYPECODE, value);
  }
  
  public String getBeforeTypeOrgCode()
  {
    return (String) this.getObjectValue(BEFORETYPEORGCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getBeforeTypeOrgCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(BEFORETYPEORGCODE);
  }
  
  public void setBeforeTypeOrgCode(String value)
  {
    this.setValue(BEFORETYPEORGCODE, value);
  }
  
  public com.runwaysdk.ComponentIF getDescription()
  {
    return (com.runwaysdk.ComponentIF) this.getObjectValue(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(com.runwaysdk.ComponentIF value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public java.util.Date getEventDate()
  {
    return (java.util.Date) this.getObjectValue(EVENTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getEventDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(EVENTDATE);
  }
  
  public void setEventDate(java.util.Date value)
  {
    this.setValue(EVENTDATE, value);
  }
  
  public Long getEventId()
  {
    return (Long) this.getObjectValue(EVENTID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getEventIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(EVENTID);
  }
  
  public void setEventId(Long value)
  {
    this.setValue(EVENTID, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.transition.TransitionEvent.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TransitionEvent get(String oid)
  {
    return (TransitionEvent) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
