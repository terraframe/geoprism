package net.geoprism.registry.graph;

@com.runwaysdk.business.ClassSignature(hash = -503146755)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoObjectType.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoObjectTypeBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "net.geoprism.registry.graph.GeoObjectType";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DESCRIPTION = "description";
  public final static java.lang.String GEOMETRYTYPE = "geometryType";
  public final static java.lang.String ISABSTRACT = "isAbstract";
  public final static java.lang.String ISGEOMETRYEDITABLE = "isGeometryEditable";
  public final static java.lang.String ISPRIVATE = "isPrivate";
  public final static java.lang.String LABEL = "label";
  public final static java.lang.String MDVERTEX = "mdVertex";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String ORGANIZATION = "organization";
  public final static java.lang.String SEQ = "seq";
  public final static java.lang.String SUPERTYPE = "superType";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -503146755;
  
  public GeoObjectTypeBase()
  {
    super();
  }
  
  public String getCode()
  {
    return (String) this.getObjectValue(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    this.setValue(CODE, value);
  }
  
  public com.runwaysdk.ComponentIF getDescription()
  {
    return (com.runwaysdk.ComponentIF) this.getObjectValue(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(com.runwaysdk.ComponentIF value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public String getGeometryType()
  {
    return (String) this.getObjectValue(GEOMETRYTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeometryTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOMETRYTYPE);
  }
  
  public void setGeometryType(String value)
  {
    this.setValue(GEOMETRYTYPE, value);
  }
  
  public Boolean getIsAbstract()
  {
    return (Boolean) this.getObjectValue(ISABSTRACT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsAbstractMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISABSTRACT);
  }
  
  public void setIsAbstract(Boolean value)
  {
    this.setValue(ISABSTRACT, value);
  }
  
  public Boolean getIsGeometryEditable()
  {
    return (Boolean) this.getObjectValue(ISGEOMETRYEDITABLE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsGeometryEditableMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISGEOMETRYEDITABLE);
  }
  
  public void setIsGeometryEditable(Boolean value)
  {
    this.setValue(ISGEOMETRYEDITABLE, value);
  }
  
  public Boolean getIsPrivate()
  {
    return (Boolean) this.getObjectValue(ISPRIVATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsPrivateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPRIVATE);
  }
  
  public void setIsPrivate(Boolean value)
  {
    this.setValue(ISPRIVATE, value);
  }
  
  public com.runwaysdk.ComponentIF getLabel()
  {
    return (com.runwaysdk.ComponentIF) this.getObjectValue(LABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(com.runwaysdk.ComponentIF value)
  {
    this.setValue(LABEL, value);
  }
  
  public com.runwaysdk.system.metadata.MdVertex getMdVertex()
  {
    if (this.getObjectValue(MDVERTEX) == null)
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdVertex.get( (String) this.getObjectValue(MDVERTEX));
    }
  }
  
  public String getMdVertexOid()
  {
    return (String) this.getObjectValue(MDVERTEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getMdVertexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(MDVERTEX);
  }
  
  public void setMdVertex(com.runwaysdk.system.metadata.MdVertex value)
  {
    this.setValue(MDVERTEX, value.getOid());
  }
  
  public void setMdVertexId(java.lang.String oid)
  {
    this.setValue(MDVERTEX, oid);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public net.geoprism.registry.graph.GraphOrganization getOrganization()
  {
    return (net.geoprism.registry.graph.GraphOrganization) this.getObjectValue(ORGANIZATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getOrganizationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(ORGANIZATION);
  }
  
  public void setOrganization(net.geoprism.registry.graph.GraphOrganization value)
  {
    this.setValue(ORGANIZATION, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  public net.geoprism.registry.graph.GeoObjectType getSuperType()
  {
    return (net.geoprism.registry.graph.GeoObjectType) this.getObjectValue(SUPERTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getSuperTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoObjectType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(SUPERTYPE);
  }
  
  public void setSuperType(net.geoprism.registry.graph.GeoObjectType value)
  {
    this.setValue(SUPERTYPE, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoObjectType get(String oid)
  {
    return (GeoObjectType) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
