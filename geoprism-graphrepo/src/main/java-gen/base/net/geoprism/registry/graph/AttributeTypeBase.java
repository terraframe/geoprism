package net.geoprism.registry.graph;

@com.runwaysdk.business.ClassSignature(hash = -2079269671)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AttributeType.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class AttributeTypeBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "net.geoprism.registry.graph.AttributeType";
  public final static java.lang.String CODE = "code";
  public final static java.lang.String DESCRIPTION = "description";
  public final static java.lang.String GEOOBJECTTYPE = "geoObjectType";
  public final static java.lang.String ISCHANGEOVERTIME = "isChangeOverTime";
  public final static java.lang.String ISDEFAULT = "isDefault";
  public final static java.lang.String LABEL = "label";
  public final static java.lang.String OID = "oid";
  public final static java.lang.String REQUIRED = "required";
  public final static java.lang.String SEQ = "seq";
  public final static java.lang.String UNIQUE = "unique";
  @SuppressWarnings("unused")
  private static final long serialVersionUID = -2079269671;
  
  public AttributeTypeBase()
  {
    super();
  }
  
  public String getCode()
  {
    return (String) this.getObjectValue(CODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CODE);
  }
  
  public void setCode(String value)
  {
    this.setValue(CODE, value);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDAOIF)mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(com.runwaysdk.ComponentIF value)
  {
    this.setValue(DESCRIPTION, value);
  }
  
  public net.geoprism.registry.graph.GeoObjectType getGeoObjectType()
  {
    return (net.geoprism.registry.graph.GeoObjectType) this.getObjectValue(GEOOBJECTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF getGeoObjectTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeGraphReferenceDAOIF)mdClassIF.definesAttribute(GEOOBJECTTYPE);
  }
  
  public void setGeoObjectType(net.geoprism.registry.graph.GeoObjectType value)
  {
    this.setValue(GEOOBJECTTYPE, value);
  }
  
  public Boolean getIsChangeOverTime()
  {
    return (Boolean) this.getObjectValue(ISCHANGEOVERTIME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsChangeOverTimeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISCHANGEOVERTIME);
  }
  
  public void setIsChangeOverTime(Boolean value)
  {
    this.setValue(ISCHANGEOVERTIME, value);
  }
  
  public Boolean getIsDefault()
  {
    return (Boolean) this.getObjectValue(ISDEFAULT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsDefaultMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISDEFAULT);
  }
  
  public void setIsDefault(Boolean value)
  {
    this.setValue(ISDEFAULT, value);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(com.runwaysdk.ComponentIF value)
  {
    this.setValue(LABEL, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Boolean getRequired()
  {
    return (Boolean) this.getObjectValue(REQUIRED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getRequiredMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(REQUIRED);
  }
  
  public void setRequired(Boolean value)
  {
    this.setValue(REQUIRED, value);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  public Boolean getUnique()
  {
    return (Boolean) this.getObjectValue(UNIQUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getUniqueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.AttributeType.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(UNIQUE);
  }
  
  public void setUnique(Boolean value)
  {
    this.setValue(UNIQUE, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AttributeType get(String oid)
  {
    return (AttributeType) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
