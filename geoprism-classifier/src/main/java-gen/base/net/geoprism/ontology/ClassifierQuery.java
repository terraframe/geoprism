/**
 * Copyright (c) 2023 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism(tm).
 *
 * Geoprism(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.ontology;

@com.runwaysdk.business.ClassSignature(hash = -116062206)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Classifier.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class ClassifierQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 
{

  public ClassifierQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public ClassifierQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return net.geoprism.ontology.Classifier.CLASS;
  }
  public com.runwaysdk.query.SelectableBoolean getCategory()
  {
    return getCategory(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CATEGORY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CATEGORY, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierId()
  {
    return getClassifierId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierPackage()
  {
    return getClassifierPackage(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.ontology.Classifier.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.DISPLAYLABEL);

    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.DISPLAYLABEL);

    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.ontology.Classifier.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.getComponentQuery().get(net.geoprism.ontology.Classifier.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(net.geoprism.ontology.Classifier.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(net.geoprism.ontology.Classifier.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.ontology.Classifier.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(net.geoprism.ontology.Classifier.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(net.geoprism.ontology.Classifier.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.DISPLAYLABEL)) 
    {
       return new net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Classifier> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Classifier>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isNotChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.getBusinessQuery().isChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.getBusinessQuery().isNotChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.getBusinessQuery().isParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.getBusinessQuery().isParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(classifierHasSynonymQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.getBusinessQuery().isNotParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.getBusinessQuery().isNotParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classifierHasSynonymQuery);
  }


  public com.runwaysdk.query.Condition isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.getBusinessQuery().isParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.getBusinessQuery().isNotParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ClassifierQueryReferenceIF extends  com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableBoolean getCategory();
    public com.runwaysdk.query.SelectableBoolean getCategory(String alias);
    public com.runwaysdk.query.SelectableBoolean getCategory(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getClassifierId();
    public com.runwaysdk.query.SelectableChar getClassifierId(String alias);
    public com.runwaysdk.query.SelectableChar getClassifierId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getClassifierPackage();
    public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias);
    public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel();
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.ontology.Classifier classifier);

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.ontology.Classifier classifier);


  public com.runwaysdk.query.Condition hasSynonym();

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery);

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery);


  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym();

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery);


  public com.runwaysdk.query.Condition isAChild();

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_isAChild();

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_hasSynonym();

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery);

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery);


  public com.runwaysdk.query.Condition NOT_IN_isAChild();

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition classifierTermAttributeRoots();
  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery);


  public com.runwaysdk.query.Condition isAParent();
  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_isAParent();
  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_isAParent();
  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ClassifierQueryReference extends com.runwaysdk.query.AttributeTerm
 implements ClassifierQueryReferenceIF

  {

  public ClassifierQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(net.geoprism.ontology.Classifier classifier)
    {
      if(classifier == null) return this.EQ((java.lang.String)null);
      return this.EQ(classifier.getOid());
    }

    public com.runwaysdk.query.BasicCondition NE(net.geoprism.ontology.Classifier classifier)
    {
      if(classifier == null) return this.NE((java.lang.String)null);
      return this.NE(classifier.getOid());
    }

  public com.runwaysdk.query.SelectableBoolean getCategory()
  {
    return getCategory(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.ontology.Classifier.CATEGORY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.ontology.Classifier.CATEGORY, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierId()
  {
    return getClassifierId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierPackage()
  {
    return getClassifierPackage(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.CREATEDBY,  alias, displayLabel);

  }
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.ontology.Classifier.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.ontology.Classifier.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.ontology.Classifier.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.ontology.Classifier.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.isParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.isParentIn_SUBSELECT(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.isParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.isParentIn_SUBSELECT(classifierHasSynonymQuery);
  }


  public com.runwaysdk.query.Condition isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.isParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.isParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.isNotParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    return this.isNotParentIn_SUBSELECT(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierHasSynonym.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierSynonymQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.isNotParentIn(classifierHasSynonymQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasSynonym(net.geoprism.ontology.ClassifierSynonymQuery classifierSynonymQuery, net.geoprism.ontology.ClassifierHasSynonymQuery classifierHasSynonymQuery)
  {
    classifierHasSynonymQuery.AND(classifierHasSynonymQuery.hasChild(classifierSynonymQuery));
    return this.isNotParentIn_SUBSELECT(classifierHasSynonymQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isNotParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isNotParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(classifierQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.isNotParentIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAChild(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasChild(classifierQuery));
    return this.isNotParentIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.isChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.isChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.isChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.isChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.isNotChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierMultiTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeMultiTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isNotChildIn(classifierMultiTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierMultiTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeMultiTermQuery mdAttributeMultiTermQuery, net.geoprism.ontology.ClassifierMultiTermAttributeRootQuery classifierMultiTermAttributeRootQuery)
  {
    classifierMultiTermAttributeRootQuery.AND(classifierMultiTermAttributeRootQuery.hasParent(mdAttributeMultiTermQuery));
    return this.isNotChildIn_SUBSELECT(classifierMultiTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.isNotChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierTermAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn(classifierTermAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_classifierTermAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, net.geoprism.ontology.ClassifierTermAttributeRootQuery classifierTermAttributeRootQuery)
  {
    classifierTermAttributeRootQuery.AND(classifierTermAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn_SUBSELECT(classifierTermAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isNotChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    return this.isNotChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(net.geoprism.ontology.ClassifierIsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(classifierQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.isNotChildIn(classifierIsARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_isAParent(net.geoprism.ontology.ClassifierQuery classifierQuery, net.geoprism.ontology.ClassifierIsARelationshipQuery classifierIsARelationshipQuery)
  {
    classifierIsARelationshipQuery.AND(classifierIsARelationshipQuery.hasParent(classifierQuery));
    return this.isNotChildIn_SUBSELECT(classifierIsARelationshipQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.DISPLAYLABEL)) 
    {
       return new net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ClassifierQueryMultiReferenceIF extends  com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableBoolean getCategory();
    public com.runwaysdk.query.SelectableBoolean getCategory(String alias);
    public com.runwaysdk.query.SelectableBoolean getCategory(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getClassifierId();
    public com.runwaysdk.query.SelectableChar getClassifierId(String alias);
    public com.runwaysdk.query.SelectableChar getClassifierId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getClassifierPackage();
    public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias);
    public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel();
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableUUID getOid();
    public com.runwaysdk.query.SelectableUUID getOid(String alias);
    public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(net.geoprism.ontology.Classifier ... classifier);
    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.ontology.Classifier ... classifier);
    public com.runwaysdk.query.Condition containsAll(net.geoprism.ontology.Classifier ... classifier);
    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.ontology.Classifier ... classifier);
    public com.runwaysdk.query.Condition containsExactly(net.geoprism.ontology.Classifier ... classifier);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ClassifierQueryMultiReference extends com.runwaysdk.query.AttributeMultiTerm
 implements ClassifierQueryMultiReferenceIF

  {

  public ClassifierQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(net.geoprism.ontology.Classifier ... classifier)  {

      String[] itemIdArray = new String[classifier.length]; 

      for (int i=0; i<classifier.length; i++)
      {
        itemIdArray[i] = classifier[i].getOid();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(net.geoprism.ontology.Classifier ... classifier)  {

      String[] itemIdArray = new String[classifier.length]; 

      for (int i=0; i<classifier.length; i++)
      {
        itemIdArray[i] = classifier[i].getOid();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(net.geoprism.ontology.Classifier ... classifier)  {

      String[] itemIdArray = new String[classifier.length]; 

      for (int i=0; i<classifier.length; i++)
      {
        itemIdArray[i] = classifier[i].getOid();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(net.geoprism.ontology.Classifier ... classifier)  {

      String[] itemIdArray = new String[classifier.length]; 

      for (int i=0; i<classifier.length; i++)
      {
        itemIdArray[i] = classifier[i].getOid();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(net.geoprism.ontology.Classifier ... classifier)  {

      String[] itemIdArray = new String[classifier.length]; 

      for (int i=0; i<classifier.length; i++)
      {
        itemIdArray[i] = classifier[i].getOid();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableBoolean getCategory()
  {
    return getCategory(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.ontology.Classifier.CATEGORY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getCategory(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(net.geoprism.ontology.Classifier.CATEGORY, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierId()
  {
    return getClassifierId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getClassifierPackage()
  {
    return getClassifierPackage(null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getClassifierPackage(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.CLASSIFIERPACKAGE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.CREATEDBY,  alias, displayLabel);

  }
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStructIF)this.attributeFactory(net.geoprism.ontology.Classifier.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableUUID getOid()
  {
    return getOid(null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.ontology.Classifier.OID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableUUID getOid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableUUID)this.get(net.geoprism.ontology.Classifier.OID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(net.geoprism.ontology.Classifier.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.ontology.Classifier.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(net.geoprism.ontology.Classifier.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(net.geoprism.ontology.Classifier.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(net.geoprism.ontology.Classifier.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(net.geoprism.ontology.Classifier.DISPLAYLABEL)) 
    {
       return new net.geoprism.ontology.ClassifierDisplayLabelQuery.ClassifierDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
